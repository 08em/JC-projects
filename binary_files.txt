methods - serial, sequential , random (in random, can read and write at the same time)

hash function - takes value of a key field and returns the address
SEEK - moves pointer to that address in the record

records cannot be stored in a text field
use binary files to store anything except text
how to open new record - newFile.dat
READLINE - GETRECORD
WRITEKINE = PUTRECORD

to avoid overwriting records with random files, can use opened or closed hashing method # refer to ch13
how to open :

OPENFILE "newFile.dat" FOR RANDOM

# sequential files
    TYPE studentRecord
        DECLARE stdID : INTEGER 
        DECLARE Name : STRING
    ENDTYPE

    DECLARE student1 : studentRecord
    DECLARE studentFile : STRING
    DECLARE studentNewFile : STRING
    DECLARE recordAdded : BOOLEAN

    studentFile <- "studentInfo.dat"
    studentNewFile <- "studentTemp.dat"

    # serial files
    OPENFILE studentFile FOR APPEND
    OUTPUT "enter student ID:"
    INPUT student1.stdID
    WHILE student1.stdID <> -1
        OUTPUT "enter student name:"
        INPUT student1.Name
        PUTRECORD studentFile, student1 
        OUTPUT "enter student ID:"
        INPUT student1.stdID
    ENDWHILE
    CLOSEFILE studentFile

    OPENFILE studentFile FOR READ
    WHILE NOT EOF(studentFile)
        GETRECORD studentFile, student1
        OUTPUT student1.Name, student1.stdID
    ENDWHILE
    CLOSEFILE studentFile

# adding file in between

    OPENFILE studentFile FOR READ
    OPENFILE studentNewFile FOR WRITE

    OUTPUT "enter student ID:"
    INPUT student1.stdID
    OUTPUT "enter student name:"
    INPUT student1.Name
    recordAdded <- FALSE

    WHILE recordAdded = FALSE AND NOT EOF(studentFile)
        GETRECORD studentFile, studentTemp
        IF studentTemp.stdID < student1.stdID THEN 
            PUTRECORD studentNewFile, studentTemp
        ELSE 
            PUTRECORD studentNewFile, student1
            recordAdded <- TRUE
        ENDIF
    ENDWHILE

    IF EOF(studentFile) THEN
        PUTRECORD studentNewFile, student1
    ELSE
        WHILE NOT EOF(studentFile)
            GETRECORD studentFile, studentTemp
            PUTRECORD studentNewFile, studentTemp
        ENDWHILE
    ENDIF

    CLOSEFILE studentFile
    CLOSEFILE studentNewFile
    DELETE studentFile
    RENAME studentNewFile, studentFile

    # random files

    DECLARE student1 : studentRecord
    DECLARE studentFile : STRING
    DECLARE address : INTEGER


    studentFile <- "studentInfo.dat"
    OPENFILE studentFile FOR RANDOM

    OUTPUT "enter student ID:"
    INPUT student1.stdID
    OUTPUT "enter student name:"
    INPUT student1.Name

    address <- hash(student1.stdID)
    SEEK(studentFile, address)

    PUTRECORD studentFile,  # if location already has record, it will overwrite the existing record

    CLOSEFILE studentFile

    # finding a record in a random file
    OPENFILE studentFile FOR RANDOM

    OUTPUT "enter student id : "
    INPUT student1.stdID

    address <- Hash(student1.stdID)
    SEEK(student1.stdID, address)

    GETRECORD studentFile, student1

    CLOSEFILE studentFile
